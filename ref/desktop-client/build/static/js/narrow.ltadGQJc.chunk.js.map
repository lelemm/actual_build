{"version":3,"file":"narrow.ltadGQJc.chunk.js","sources":["../../../src/icons/v1/ArrowThickRight.tsx","../../../src/icons/v1/ArrowThinLeft.tsx","../../../src/components/SyncRefresh.tsx","../../../src/components/common/Card.tsx","../../../src/components/mobile/budget/ListItem.tsx","../../../src/components/mobile/budget/BudgetTable.jsx","../../../src/components/mobile/budget/index.tsx","../../../src/components/mobile/accounts/Accounts.jsx","../../../src/components/mobile/accounts/AccountTransactions.jsx","../../../src/components/mobile/accounts/Account.jsx"],"sourcesContent":["import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowThickRight = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path d=\"M10 7H2v6h8v5l8-8-8-8v5z\" fill=\"currentColor\" />\n  </svg>\n);\n","import * as React from 'react';\nimport type { SVGProps } from 'react';\nexport const SvgArrowThinLeft = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 20 20\"\n    style={{\n      color: 'inherit',\n      ...props.style,\n    }}\n  >\n    <path\n      d=\"m3.828 9 6.071-6.071-1.414-1.414L0 10l.707.707 7.778 7.778 1.414-1.414L3.828 11H20V9H3.828z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n","import React, { type ReactNode, useState } from 'react';\n\ntype ChildrenProps = {\n  refreshing: boolean;\n  onRefresh: () => Promise<void>;\n};\ntype SyncRefreshProps = {\n  onSync: () => Promise<void>;\n  children: (props: ChildrenProps) => ReactNode;\n};\nexport function SyncRefresh({ onSync, children }: SyncRefreshProps) {\n  const [syncing, setSyncing] = useState(false);\n\n  async function onSync_() {\n    setSyncing(true);\n    await onSync();\n    setSyncing(false);\n  }\n\n  return <>{children({ refreshing: syncing, onRefresh: onSync_ })}</>;\n}\n","import { type ComponentProps, forwardRef } from 'react';\n\nimport { theme } from '../../style';\n\nimport { View } from './View';\n\ntype CardProps = ComponentProps<typeof View>;\n\nexport const Card = forwardRef<HTMLDivElement, CardProps>(\n  ({ children, ...props }, ref) => {\n    return (\n      <View\n        {...props}\n        ref={ref}\n        style={{\n          marginTop: 15,\n          marginLeft: 5,\n          marginRight: 5,\n          borderRadius: 6,\n          backgroundColor: theme.cardBackground,\n          borderColor: theme.cardBorder,\n          boxShadow: '0 1px 2px #9594A8',\n          ...props.style,\n        }}\n      >\n        <View\n          style={{\n            borderRadius: 6,\n            overflow: 'hidden',\n          }}\n        >\n          {children}\n        </View>\n      </View>\n    );\n  },\n);\n\nCard.displayName = 'Card';\n","import React, { type ComponentProps, type ReactNode } from 'react';\n\nimport { type CSSProperties, theme } from '../../../style';\nimport { View } from '../../common/View';\n\nconst ROW_HEIGHT = 50;\n\ntype ListItemProps = ComponentProps<typeof View> & {\n  children?: ReactNode;\n  style: CSSProperties;\n};\n\nexport const ListItem = ({ children, style, ...props }: ListItemProps) => {\n  return (\n    <View\n      style={{\n        height: ROW_HEIGHT,\n        borderBottomWidth: 1,\n        borderColor: theme.tableBorder,\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingLeft: 5,\n        paddingRight: 5,\n        zIndex: 1,\n        ...style,\n      }}\n      {...props}\n    >\n      {children}\n    </View>\n  );\n};\n","import React, { memo, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { AutoTextSize } from 'auto-text-size';\nimport memoizeOne from 'memoize-one';\n\nimport { collapseModals, pushModal } from 'loot-core/client/actions';\nimport { rolloverBudget, reportBudget } from 'loot-core/src/client/queries';\nimport * as monthUtils from 'loot-core/src/shared/months';\n\nimport { useFeatureFlag } from '../../../hooks/useFeatureFlag';\nimport { useLocalPref } from '../../../hooks/useLocalPref';\nimport { useNavigate } from '../../../hooks/useNavigate';\nimport { SvgLogo } from '../../../icons/logo';\nimport { SvgExpandArrow } from '../../../icons/v0';\nimport {\n  SvgArrowThinLeft,\n  SvgArrowThinRight,\n  SvgArrowThickRight,\n  SvgCheveronRight,\n} from '../../../icons/v1';\nimport { SvgViewShow } from '../../../icons/v2';\nimport { useResponsive } from '../../../ResponsiveProvider';\nimport { theme, styles } from '../../../style';\nimport { BalanceWithCarryover } from '../../budget/BalanceWithCarryover';\nimport { makeAmountGrey, makeBalanceAmountStyle } from '../../budget/util';\nimport { Button } from '../../common/Button';\nimport { Card } from '../../common/Card';\nimport { Label } from '../../common/Label';\nimport { Text } from '../../common/Text';\nimport { View } from '../../common/View';\nimport { MobilePageHeader, Page } from '../../Page';\nimport { CellValue } from '../../spreadsheet/CellValue';\nimport { useFormat } from '../../spreadsheet/useFormat';\nimport { useSheetValue } from '../../spreadsheet/useSheetValue';\nimport { MOBILE_NAV_HEIGHT } from '../MobileNavTabs';\nimport { PullToRefresh } from '../PullToRefresh';\n\nimport { ListItem } from './ListItem';\n\nconst PILL_STYLE = {\n  borderRadius: 16,\n  color: theme.pillText,\n  backgroundColor: theme.pillBackgroundLight,\n};\n\nfunction getColumnWidth({ show3Cols, isSidebar = false, offset = 0 } = {}) {\n  // If show3Cols = 35vw | 20vw | 20vw | 20vw,\n  // Else = 45vw | 25vw | 25vw,\n  if (!isSidebar) {\n    return show3Cols ? `${20 + offset}vw` : `${25 + offset}vw`;\n  }\n  return show3Cols ? `${35 + offset}vw` : `${45 + offset}vw`;\n}\n\nfunction ToBudget({ toBudget, onClick, show3Cols }) {\n  const amount = useSheetValue(toBudget);\n  const format = useFormat();\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        width: sidebarColumnWidth,\n      }}\n    >\n      <Button\n        type=\"bare\"\n        style={{ maxWidth: sidebarColumnWidth }}\n        onPointerUp={e => {\n          e.stopPropagation();\n          onClick?.();\n        }}\n      >\n        <View>\n          <Label\n            title={amount < 0 ? 'Overbudgeted' : 'To Budget'}\n            style={{\n              ...(amount < 0 ? styles.smallText : {}),\n              color: theme.formInputText,\n              flexShrink: 0,\n              textAlign: 'left',\n            }}\n          />\n          <CellValue\n            binding={toBudget}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: sidebarColumnWidth,\n                  fontSize: 12,\n                  fontWeight: '700',\n                  color: amount < 0 ? theme.errorText : theme.formInputText,\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n        <SvgCheveronRight\n          style={{\n            flexShrink: 0,\n            color: theme.mobileHeaderTextSubdued,\n            marginLeft: 5,\n          }}\n          width={14}\n          height={14}\n        />\n      </Button>\n    </View>\n  );\n}\n\nfunction Saved({ projected, onClick, show3Cols }) {\n  const binding = projected\n    ? reportBudget.totalBudgetedSaved\n    : reportBudget.totalSaved;\n\n  const saved = useSheetValue(binding) || 0;\n  const format = useFormat();\n  const isNegative = saved < 0;\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\n\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        width: sidebarColumnWidth,\n      }}\n    >\n      <Button\n        type=\"bare\"\n        style={{ maxWidth: sidebarColumnWidth }}\n        onPointerUp={e => {\n          e.stopPropagation();\n          onClick?.();\n        }}\n      >\n        <View>\n          <View>\n            {projected ? (\n              <AutoTextSize\n                as={Label}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                title=\"Projected Savings\"\n                style={{\n                  maxWidth: sidebarColumnWidth,\n                  color: theme.formInputText,\n                  textAlign: 'left',\n                  fontSize: 12,\n                }}\n              />\n            ) : (\n              <Label\n                title={isNegative ? 'Overspent' : 'Saved'}\n                style={{\n                  color: theme.formInputText,\n                  textAlign: 'left',\n                }}\n              />\n            )}\n          </View>\n\n          <CellValue\n            binding={binding}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: sidebarColumnWidth,\n                  fontSize: 12,\n                  fontWeight: '700',\n                  color: projected\n                    ? theme.warningText\n                    : isNegative\n                      ? theme.errorTextDark\n                      : theme.formInputText,\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n        <SvgCheveronRight\n          style={{\n            flexShrink: 0,\n            color: theme.mobileHeaderTextSubdued,\n            marginLeft: 5,\n          }}\n          width={14}\n          height={14}\n        />\n      </Button>\n    </View>\n  );\n}\n\nfunction BudgetCell({\n  name,\n  binding,\n  style,\n  categoryId,\n  month,\n  onBudgetAction,\n  ...props\n}) {\n  const dispatch = useDispatch();\n  const [budgetType = 'rollover'] = useLocalPref('budgetType');\n\n  const categoryBudgetMenuModal = `${budgetType}-budget-menu`;\n\n  const onOpenCategoryBudgetMenu = () => {\n    dispatch(\n      pushModal(categoryBudgetMenuModal, {\n        categoryId,\n        month,\n        onUpdateBudget: amount => {\n          onBudgetAction(month, 'budget-amount', {\n            category: categoryId,\n            amount,\n          });\n        },\n        onCopyLastMonthAverage: () => {\n          onBudgetAction(month, 'copy-single-last', {\n            category: categoryId,\n          });\n        },\n        onSetMonthsAverage: numberOfMonths => {\n          if (\n            numberOfMonths !== 3 &&\n            numberOfMonths !== 6 &&\n            numberOfMonths !== 12\n          ) {\n            return;\n          }\n\n          onBudgetAction(month, `set-single-${numberOfMonths}-avg`, {\n            category: categoryId,\n          });\n        },\n        onApplyBudgetTemplate: () => {\n          onBudgetAction(month, 'apply-single-category-template', {\n            category: categoryId,\n          });\n        },\n      }),\n    );\n  };\n\n  return (\n    <CellValue\n      binding={binding}\n      type=\"financial\"\n      getStyle={makeAmountGrey}\n      data-testid={name}\n      onPointerUp={e => {\n        e.stopPropagation();\n        onOpenCategoryBudgetMenu();\n      }}\n      {...props}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction ExpenseGroupPreview({ group, pending, style }) {\n  return (\n    <Card\n      style={{\n        marginTop: 7,\n        marginBottom: 7,\n        opacity: pending ? 1 : 0.4,\n      }}\n    >\n      <ExpenseGroupHeader group={group} blank={true} />\n\n      {group.categories.map((cat, index) => (\n        <ExpenseCategory\n          key={cat.id}\n          category={cat}\n          blank={true}\n          index={index}\n        />\n      ))}\n    </Card>\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction ExpenseCategoryPreview({ name, pending, style }) {\n  return (\n    <ListItem\n      style={{\n        flex: 1,\n        borderColor: 'transparent',\n        borderRadius: 4,\n      }}\n    >\n      <Text style={styles.smallText}>{name}</Text>\n    </ListItem>\n  );\n}\n\nconst ExpenseCategory = memo(function ExpenseCategory({\n  type,\n  category,\n  isHidden,\n  goal,\n  longGoal,\n  budgeted,\n  spent,\n  balance,\n  carryover,\n  index,\n  // gestures,\n  blank,\n  style,\n  month,\n  onEdit,\n  onBudgetAction,\n  show3Cols,\n  showBudgetedCol,\n}) {\n  const opacity = blank ? 0 : 1;\n\n  const isGoalTemplatesEnabled = useFeatureFlag('goalTemplatesEnabled');\n  const goalTemp = useSheetValue(goal);\n  const goalValue = isGoalTemplatesEnabled ? goalTemp : null;\n\n  const [budgetType = 'rollover'] = useLocalPref('budgetType');\n  const dispatch = useDispatch();\n\n  const onCarryover = carryover => {\n    onBudgetAction(month, 'carryover', {\n      category: category.id,\n      flag: carryover,\n    });\n    dispatch(collapseModals(`${budgetType}-balance-menu`));\n  };\n\n  const catBalance = useSheetValue(\n    type === 'rollover'\n      ? rolloverBudget.catBalance(category.id)\n      : reportBudget.catBalance(category.id),\n  );\n  const budgetedtmp = useSheetValue(budgeted);\n  const balancetmp = useSheetValue(balance);\n  const isLongGoal = useSheetValue(longGoal) === 1;\n  const budgetedValue = isGoalTemplatesEnabled\n    ? isLongGoal\n      ? balancetmp\n      : budgetedtmp\n    : null;\n\n  const onTransfer = () => {\n    dispatch(\n      pushModal('transfer', {\n        title: category.name,\n        month,\n        amount: catBalance,\n        onSubmit: (amount, toCategoryId) => {\n          onBudgetAction(month, 'transfer-category', {\n            amount,\n            from: category.id,\n            to: toCategoryId,\n          });\n          dispatch(collapseModals(`${budgetType}-balance-menu`));\n        },\n        showToBeBudgeted: true,\n      }),\n    );\n  };\n\n  const onCover = () => {\n    dispatch(\n      pushModal('cover', {\n        title: category.name,\n        month,\n        onSubmit: fromCategoryId => {\n          onBudgetAction(month, 'cover-overspending', {\n            to: category.id,\n            from: fromCategoryId,\n          });\n          dispatch(collapseModals(`${budgetType}-balance-menu`));\n        },\n      }),\n    );\n  };\n\n  const onOpenBalanceMenu = () => {\n    dispatch(\n      pushModal(`${budgetType}-balance-menu`, {\n        categoryId: category.id,\n        month,\n        onCarryover,\n        ...(budgetType === 'rollover' && { onTransfer, onCover }),\n      }),\n    );\n  };\n\n  const listItemRef = useRef();\n  const format = useFormat();\n  const navigate = useNavigate();\n  const onShowActivity = () => {\n    navigate(`/categories/${category.id}?month=${month}`);\n  };\n\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\n  const columnWidth = getColumnWidth({ show3Cols });\n\n  const content = (\n    <ListItem\n      style={{\n        backgroundColor: 'transparent',\n        borderBottomWidth: 0,\n        borderTopWidth: index > 0 ? 1 : 0,\n        opacity: isHidden ? 0.5 : undefined,\n        ...style,\n      }}\n      data-testid=\"row\"\n      innerRef={listItemRef}\n    >\n      <View\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'flex-start',\n        }}\n      >\n        <Button\n          type=\"bare\"\n          style={{\n            maxWidth: sidebarColumnWidth,\n          }}\n          onPointerUp={e => {\n            e.stopPropagation();\n            onEdit?.(category.id);\n          }}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n            }}\n          >\n            <Text\n              style={{\n                ...styles.lineClamp(2),\n                width: sidebarColumnWidth,\n                textAlign: 'left',\n                ...styles.smallText,\n              }}\n              data-testid=\"category-name\"\n            >\n              {category.name}\n            </Text>\n            <SvgCheveronRight\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\n              width={14}\n              height={14}\n            />\n          </View>\n        </Button>\n      </View>\n      <View\n        style={{\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'row',\n          opacity,\n        }}\n      >\n        <View\n          style={{\n            ...(!show3Cols && !showBudgetedCol && { display: 'none' }),\n            width: columnWidth,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n          }}\n        >\n          <BudgetCell\n            name=\"budgeted\"\n            binding={budgeted}\n            categoryId={category.id}\n            month={month}\n            onBudgetAction={onBudgetAction}\n            formatter={value => (\n              <Button\n                type=\"bare\"\n                style={{\n                  ...PILL_STYLE,\n                  maxWidth: columnWidth,\n                }}\n              >\n                <AutoTextSize\n                  key={`${value}|${show3Cols}|${showBudgetedCol}`}\n                  as={Text}\n                  minFontSizePx={6}\n                  maxFontSizePx={12}\n                  mode=\"oneline\"\n                  style={{\n                    maxWidth: columnWidth,\n                    textAlign: 'right',\n                    fontSize: 12,\n                  }}\n                >\n                  {format(value, 'financial')}\n                </AutoTextSize>\n              </Button>\n            )}\n          />\n        </View>\n        <View\n          style={{\n            ...(!show3Cols && showBudgetedCol && { display: 'none' }),\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n            width: columnWidth,\n          }}\n        >\n          <CellValue\n            name=\"spent\"\n            binding={spent}\n            getStyle={makeAmountGrey}\n            type=\"financial\"\n            onPointerUp={e => {\n              e.stopPropagation();\n              onShowActivity();\n            }}\n            formatter={value => (\n              <Button\n                type=\"bare\"\n                style={{\n                  ...PILL_STYLE,\n                  maxWidth: columnWidth,\n                }}\n              >\n                <AutoTextSize\n                  key={`${value}|${show3Cols}|${showBudgetedCol}`}\n                  as={Text}\n                  minFontSizePx={6}\n                  maxFontSizePx={12}\n                  mode=\"oneline\"\n                  style={{\n                    maxWidth: columnWidth,\n                    textAlign: 'right',\n                    fontSize: 12,\n                  }}\n                >\n                  {format(value, 'financial')}\n                </AutoTextSize>\n              </Button>\n            )}\n          />\n        </View>\n        <View\n          style={{\n            ...styles.noTapHighlight,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n            width: columnWidth,\n          }}\n        >\n          <span\n            role=\"button\"\n            onPointerUp={e => {\n              e.stopPropagation();\n              onOpenBalanceMenu();\n            }}\n          >\n            <BalanceWithCarryover\n              carryover={carryover}\n              balance={balance}\n              goal={goal}\n              budgeted={budgeted}\n              longGoal={longGoal}\n              formatter={value => (\n                <Button\n                  type=\"bare\"\n                  style={{\n                    ...PILL_STYLE,\n                    maxWidth: columnWidth,\n                  }}\n                >\n                  <AutoTextSize\n                    key={value}\n                    as={Text}\n                    minFontSizePx={6}\n                    maxFontSizePx={12}\n                    mode=\"oneline\"\n                    style={{\n                      maxWidth: columnWidth,\n                      ...makeBalanceAmountStyle(\n                        value,\n                        goalValue,\n                        budgetedValue,\n                      ),\n                      textAlign: 'right',\n                      fontSize: 12,\n                    }}\n                  >\n                    {format(value, 'financial')}\n                  </AutoTextSize>\n                </Button>\n              )}\n              carryoverIndicator={({ style }) => (\n                <View\n                  style={{\n                    position: 'absolute',\n                    right: '-3px',\n                    top: '-5px',\n                    borderRadius: '50%',\n                    backgroundColor: style?.color ?? theme.pillText,\n                  }}\n                >\n                  <SvgArrowThickRight\n                    width={11}\n                    height={11}\n                    style={{ color: theme.pillBackgroundLight }}\n                  />\n                </View>\n              )}\n            />\n          </span>\n        </View>\n      </View>\n    </ListItem>\n  );\n\n  return <View>{content}</View>;\n\n  // <Draggable\n  //   id={category.id}\n  //   type=\"category\"\n  //   preview={({ pending, style }) => (\n  //     <BudgetCategoryPreview\n  //       name={category.name}\n  //       pending={pending}\n  //       style={style}\n  //     />\n  //   )}\n  //   gestures={gestures}\n  // >\n  //   <Droppable\n  //     type=\"category\"\n  //     getActiveStatus={(x, y, { layout }, { id }) => {\n  //       let pos = (y - layout.y) / layout.height;\n  //       return pos < 0.5 ? 'top' : 'bottom';\n  //     }}\n  //     onDrop={(id, type, droppable, status) =>\n  //       props.onReorder(id.replace('category:', ''), {\n  //         aroundCategory: {\n  //           id: category.id,\n  //           position: status\n  //         }\n  //       })\n  //     }\n  //   >\n  //     {() => content}\n  //   </Droppable>\n  // </Draggable>\n});\n\nconst ExpenseGroupHeader = memo(function ExpenseGroupHeader({\n  group,\n  budgeted,\n  spent,\n  balance,\n  editMode,\n  onEdit,\n  blank,\n  show3Cols,\n  showBudgetedCol,\n  collapsed,\n  onToggleCollapse,\n}) {\n  const opacity = blank ? 0 : 1;\n  const listItemRef = useRef();\n  const format = useFormat();\n  const sidebarColumnWidth = getColumnWidth({\n    show3Cols,\n    isSidebar: true,\n    offset: -3.5,\n  });\n  const columnWidth = getColumnWidth({ show3Cols });\n\n  const content = (\n    <ListItem\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: theme.tableRowHeaderBackground,\n        opacity: !!group.hidden ? 0.5 : undefined,\n        paddingLeft: 0,\n      }}\n      data-testid={`expense-group-header-${group.name}`}\n      innerRef={listItemRef}\n    >\n      <View\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          width: sidebarColumnWidth,\n        }}\n      >\n        <Button\n          type=\"bare\"\n          style={{\n            flexShrink: 0,\n            color: theme.pageTextSubdued,\n            ...styles.noTapHighlight,\n          }}\n          activeStyle={{\n            backgroundColor: 'transparent',\n          }}\n          hoveredStyle={{\n            backgroundColor: 'transparent',\n          }}\n          onPointerUp={e => {\n            e.stopPropagation();\n            onToggleCollapse?.(group.id);\n          }}\n        >\n          <SvgExpandArrow\n            width={8}\n            height={8}\n            style={{\n              flexShrink: 0,\n              transition: 'transform .1s',\n              transform: collapsed ? 'rotate(-90deg)' : '',\n            }}\n          />\n        </Button>\n        <Button\n          type=\"bare\"\n          style={{\n            maxWidth: sidebarColumnWidth,\n          }}\n          onPointerUp={e => {\n            e.stopPropagation();\n            onEdit?.(group.id);\n          }}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n            }}\n          >\n            <Text\n              style={{\n                ...styles.lineClamp(2),\n                width: sidebarColumnWidth,\n                textAlign: 'left',\n                ...styles.smallText,\n                fontWeight: '500',\n              }}\n              data-testid=\"group-name\"\n            >\n              {group.name}\n            </Text>\n            <SvgCheveronRight\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\n              width={14}\n              height={14}\n            />\n          </View>\n        </Button>\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          opacity,\n          paddingRight: 5,\n        }}\n      >\n        <View\n          style={{\n            ...(!show3Cols && !showBudgetedCol && { display: 'none' }),\n            width: columnWidth,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n          }}\n        >\n          <CellValue\n            binding={budgeted}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  fontSize: 12,\n                  fontWeight: '500',\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n        <View\n          style={{\n            ...(!show3Cols && showBudgetedCol && { display: 'none' }),\n            width: columnWidth,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n          }}\n        >\n          <CellValue\n            binding={spent}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  fontSize: 12,\n                  fontWeight: '500',\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n        <View\n          style={{\n            width: columnWidth,\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n          }}\n        >\n          <CellValue\n            binding={balance}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  fontSize: 12,\n                  fontWeight: '500',\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n      </View>\n\n      {/* {editMode && (\n        <View>\n          <Button\n            onPointerUp={() => onAddCategory(group.id, group.is_income)}\n            style={{ padding: 10 }}\n          >\n            <Add width={15} height={15} />\n          </Button>\n        </View>\n      )} */}\n    </ListItem>\n  );\n\n  if (!editMode) {\n    return content;\n  }\n\n  return content;\n  // <Droppable\n  //   type=\"category\"\n  //   getActiveStatus={(x, y, { layout }, { id }) => {\n  //     return 'bottom';\n  //   }}\n  //   onDrop={(id, type, droppable, status) =>\n  //     props.onReorderCategory(id, { inGroup: group.id })\n  //   }\n  // >\n  //   {() => content}\n  // </Droppable>\n});\n\nconst IncomeGroupHeader = memo(function IncomeGroupHeader({\n  group,\n  budgeted,\n  balance,\n  onEdit,\n  collapsed,\n  onToggleCollapse,\n}) {\n  const listItemRef = useRef();\n  const format = useFormat();\n  const sidebarColumnWidth = getColumnWidth({ isSidebar: true, offset: -13.5 });\n  const columnWidth = getColumnWidth();\n\n  return (\n    <ListItem\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: theme.tableRowHeaderBackground,\n        opacity: !!group.hidden ? 0.5 : undefined,\n        paddingLeft: 0,\n      }}\n      innerRef={listItemRef}\n      data-testid={`income-group-header-${group.name}`}\n    >\n      <View\n        style={{\n          flex: 1,\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          width: sidebarColumnWidth,\n        }}\n      >\n        <Button\n          type=\"bare\"\n          style={{\n            flexShrink: 0,\n            color: theme.pageTextSubdued,\n            ...styles.noTapHighlight,\n          }}\n          activeStyle={{\n            backgroundColor: 'transparent',\n          }}\n          hoveredStyle={{\n            backgroundColor: 'transparent',\n          }}\n          onPointerUp={e => {\n            e.stopPropagation();\n            onToggleCollapse?.(group.id);\n          }}\n        >\n          <SvgExpandArrow\n            width={8}\n            height={8}\n            style={{\n              flexShrink: 0,\n              transition: 'transform .1s',\n              transform: collapsed ? 'rotate(-90deg)' : '',\n            }}\n          />\n        </Button>\n        <Button\n          type=\"bare\"\n          style={{\n            maxWidth: sidebarColumnWidth,\n          }}\n          onPointerUp={e => {\n            e.stopPropagation();\n            onEdit?.(group.id);\n          }}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n            }}\n          >\n            <Text\n              style={{\n                ...styles.lineClamp(2),\n                width: sidebarColumnWidth,\n                textAlign: 'left',\n                ...styles.smallText,\n              }}\n              data-testid=\"group-name\"\n            >\n              {group.name}\n            </Text>\n            <SvgCheveronRight\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\n              width={14}\n              height={14}\n            />\n          </View>\n        </Button>\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          paddingRight: 5,\n        }}\n      >\n        {budgeted && (\n          <View\n            style={{\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n              width: columnWidth,\n            }}\n          >\n            <CellValue\n              binding={budgeted}\n              type=\"financial\"\n              formatter={value => (\n                <AutoTextSize\n                  key={value}\n                  as={Text}\n                  minFontSizePx={6}\n                  maxFontSizePx={12}\n                  mode=\"oneline\"\n                  style={{\n                    maxWidth: columnWidth,\n                    paddingLeft: 5,\n                    textAlign: 'right',\n                    fontSize: 12,\n                    fontWeight: '500',\n                  }}\n                >\n                  {format(value, 'financial')}\n                </AutoTextSize>\n              )}\n            />\n          </View>\n        )}\n        <View\n          style={{\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n            width: columnWidth,\n          }}\n        >\n          <CellValue\n            binding={balance}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                  fontSize: 12,\n                  fontWeight: '500',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n      </View>\n    </ListItem>\n  );\n});\n\nconst IncomeCategory = memo(function IncomeCategory({\n  index,\n  category,\n  budgeted,\n  balance,\n  month,\n  style,\n  onEdit,\n  onBudgetAction,\n}) {\n  const listItemRef = useRef();\n  const format = useFormat();\n  const sidebarColumnWidth = getColumnWidth({ isSidebar: true, offset: -10 });\n  const columnWidth = getColumnWidth();\n\n  return (\n    <ListItem\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: 'transparent',\n        borderBottomWidth: 0,\n        borderTopWidth: index > 0 ? 1 : 0,\n        opacity: !!category.hidden ? 0.5 : undefined,\n        ...style,\n      }}\n      data-testid=\"row\"\n      innerRef={listItemRef}\n    >\n      <View\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'flex-start',\n          width: sidebarColumnWidth,\n        }}\n      >\n        <Button\n          type=\"bare\"\n          style={{\n            maxWidth: sidebarColumnWidth,\n          }}\n          onPointerUp={e => {\n            e.stopPropagation();\n            onEdit?.(category.id);\n          }}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'flex-start',\n            }}\n          >\n            <Text\n              style={{\n                ...styles.lineClamp(2),\n                width: sidebarColumnWidth,\n                textAlign: 'left',\n                ...styles.smallText,\n              }}\n              data-testid=\"category-name\"\n            >\n              {category.name}\n            </Text>\n            <SvgCheveronRight\n              style={{ flexShrink: 0, color: theme.tableTextSubdued }}\n              width={14}\n              height={14}\n            />\n          </View>\n        </Button>\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n        }}\n      >\n        {budgeted && (\n          <View\n            style={{\n              width: columnWidth,\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n            }}\n          >\n            <BudgetCell\n              name=\"budgeted\"\n              binding={budgeted}\n              categoryId={category.id}\n              month={month}\n              onBudgetAction={onBudgetAction}\n              formatter={value => (\n                <Button\n                  type=\"bare\"\n                  style={{ ...PILL_STYLE, maxWidth: columnWidth }}\n                >\n                  <AutoTextSize\n                    key={value}\n                    as={Text}\n                    minFontSizePx={6}\n                    maxFontSizePx={12}\n                    mode=\"oneline\"\n                    style={{\n                      maxWidth: columnWidth,\n                      textAlign: 'right',\n                      fontSize: 12,\n                    }}\n                  >\n                    {format(value, 'financial')}\n                  </AutoTextSize>\n                </Button>\n              )}\n            />\n          </View>\n        )}\n        <View\n          style={{\n            justifyContent: 'center',\n            alignItems: 'flex-end',\n            width: columnWidth,\n            paddingRight: 5,\n          }}\n        >\n          <CellValue\n            binding={balance}\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  textAlign: 'right',\n                  fontSize: 12,\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n      </View>\n    </ListItem>\n  );\n});\n\n// export function BudgetAccessoryView() {\n//   let emitter = useContext(AmountAccessoryContext);\n\n//   return (\n//     <View>\n//       <View\n//         style={{\n//           flexDirection: 'row',\n//           justifyContent: 'flex-end',\n//           alignItems: 'stretch',\n//           backgroundColor: colorsm.tableBackground,\n//           padding: 5,\n//           height: 45\n//         }}\n//       >\n//         <MathOperations emitter={emitter} />\n//         <View style={{ flex: 1 }} />\n//         <Button\n//           onPointerUp={() => emitter.emit('moveUp')}\n//           style={{ marginRight: 5 }}\n//           data-testid=\"up\"\n//         >\n//           <ArrowThinUp width={13} height={13} />\n//         </Button>\n//         <Button\n//           onPointerUp={() => emitter.emit('moveDown')}\n//           style={{ marginRight: 5 }}\n//           data-testid=\"down\"\n//         >\n//           <ArrowThinDown width={13} height={13} />\n//         </Button>\n//         <Button onPointerUp={() => emitter.emit('done')} data-testid=\"done\">\n//           Done\n//         </Button>\n//       </View>\n//     </View>\n//   );\n// }\n\nconst ExpenseGroup = memo(function ExpenseGroup({\n  type,\n  group,\n  editMode,\n  onEditGroup,\n  onEditCategory,\n  // gestures,\n  month,\n  // onReorderCategory,\n  // onReorderGroup,\n  onAddCategory,\n  onBudgetAction,\n  showBudgetedCol,\n  show3Cols,\n  showHiddenCategories,\n  collapsed,\n  onToggleCollapse,\n}) {\n  function editable(content) {\n    if (!editMode) {\n      return content;\n    }\n\n    return content;\n    // <Draggable\n    //   id={group.id}\n    //   type=\"group\"\n    //   preview={({ pending, style }) => (\n    //     <BudgetGroupPreview group={group} pending={pending} style={style} />\n    //   )}\n    //   gestures={gestures}\n    // >\n    //   <Droppable\n    //     type=\"group\"\n    //     getActiveStatus={(x, y, { layout }, { id }) => {\n    //       let pos = (y - layout.y) / layout.height;\n    //       return pos < 0.5 ? 'top' : 'bottom';\n    //     }}\n    //     onDrop={(id, type, droppable, status) => {\n    //       onReorderGroup(id, group.id, status);\n    //     }}\n    //   >\n    //     {() => content}\n    //   </Droppable>\n    // </Draggable>\n  }\n\n  return editable(\n    <Card\n      style={{\n        marginTop: 4,\n        marginBottom: 4,\n      }}\n    >\n      <ExpenseGroupHeader\n        group={group}\n        showBudgetedCol={showBudgetedCol}\n        budgeted={\n          type === 'report'\n            ? reportBudget.groupBudgeted(group.id)\n            : rolloverBudget.groupBudgeted(group.id)\n        }\n        spent={\n          type === 'report'\n            ? reportBudget.groupSumAmount(group.id)\n            : rolloverBudget.groupSumAmount(group.id)\n        }\n        balance={\n          type === 'report'\n            ? reportBudget.groupBalance(group.id)\n            : rolloverBudget.groupBalance(group.id)\n        }\n        show3Cols={show3Cols}\n        editMode={editMode}\n        onAddCategory={onAddCategory}\n        onEdit={onEditGroup}\n        collapsed={collapsed}\n        onToggleCollapse={onToggleCollapse}\n        // onReorderCategory={onReorderCategory}\n      />\n\n      {group.categories\n        .filter(\n          category => !collapsed && (!category.hidden || showHiddenCategories),\n        )\n        .map((category, index) => {\n          return (\n            <ExpenseCategory\n              key={category.id}\n              index={index}\n              show3Cols={show3Cols}\n              type={type}\n              category={category}\n              isHidden={!!category.hidden || group.hidden}\n              goal={\n                type === 'report'\n                  ? reportBudget.catGoal(category.id)\n                  : rolloverBudget.catGoal(category.id)\n              }\n              longGoal={\n                type === 'report'\n                  ? reportBudget.catLongGoal(category.id)\n                  : rolloverBudget.catLongGoal(category.id)\n              }\n              budgeted={\n                type === 'report'\n                  ? reportBudget.catBudgeted(category.id)\n                  : rolloverBudget.catBudgeted(category.id)\n              }\n              spent={\n                type === 'report'\n                  ? reportBudget.catSumAmount(category.id)\n                  : rolloverBudget.catSumAmount(category.id)\n              }\n              balance={\n                type === 'report'\n                  ? reportBudget.catBalance(category.id)\n                  : rolloverBudget.catBalance(category.id)\n              }\n              carryover={\n                type === 'report'\n                  ? reportBudget.catCarryover(category.id)\n                  : rolloverBudget.catCarryover(category.id)\n              }\n              style={{\n                backgroundColor: theme.tableBackground,\n              }}\n              showBudgetedCol={showBudgetedCol}\n              editMode={editMode}\n              onEdit={onEditCategory}\n              // gestures={gestures}\n              month={month}\n              // onReorder={onReorderCategory}\n              onBudgetAction={onBudgetAction}\n            />\n          );\n        })}\n    </Card>,\n  );\n});\n\nfunction IncomeGroup({\n  type,\n  group,\n  month,\n  onAddCategory,\n  showHiddenCategories,\n  editMode,\n  onEditGroup,\n  onEditCategory,\n  onBudgetAction,\n  collapsed,\n  onToggleCollapse,\n}) {\n  const columnWidth = getColumnWidth();\n  return (\n    <View>\n      <View\n        style={{\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'flex-end',\n          marginTop: 50,\n          marginBottom: 5,\n          marginRight: 15,\n        }}\n      >\n        {type === 'report' && (\n          <Label title=\"Budgeted\" style={{ width: columnWidth }} />\n        )}\n        <Label title=\"Received\" style={{ width: columnWidth }} />\n      </View>\n\n      <Card style={{ marginTop: 0 }}>\n        <IncomeGroupHeader\n          group={group}\n          budgeted={\n            type === 'report' ? reportBudget.groupBudgeted(group.id) : null\n          }\n          balance={\n            type === 'report'\n              ? reportBudget.groupSumAmount(group.id)\n              : rolloverBudget.groupSumAmount(group.id)\n          }\n          onAddCategory={onAddCategory}\n          editMode={editMode}\n          onEdit={onEditGroup}\n          collapsed={collapsed}\n          onToggleCollapse={onToggleCollapse}\n        />\n\n        {group.categories\n          .filter(\n            category =>\n              !collapsed && (!category.hidden || showHiddenCategories),\n          )\n          .map((category, index) => {\n            return (\n              <IncomeCategory\n                key={category.id}\n                index={index}\n                category={category}\n                month={month}\n                type={type}\n                budgeted={\n                  type === 'report'\n                    ? reportBudget.catBudgeted(category.id)\n                    : null\n                }\n                balance={\n                  type === 'report'\n                    ? reportBudget.catSumAmount(category.id)\n                    : rolloverBudget.catSumAmount(category.id)\n                }\n                style={{\n                  backgroundColor: theme.tableBackground,\n                }}\n                editMode={editMode}\n                onEdit={onEditCategory}\n                onBudgetAction={onBudgetAction}\n              />\n            );\n          })}\n      </Card>\n    </View>\n  );\n}\n\nfunction BudgetGroups({\n  type,\n  categoryGroups,\n  onEditGroup,\n  onEditCategory,\n  editMode,\n  gestures,\n  month,\n  onSaveCategory,\n  onDeleteCategory,\n  onAddCategory,\n  onReorderCategory,\n  onReorderGroup,\n  onBudgetAction,\n  showBudgetedCol,\n  show3Cols,\n  showHiddenCategories,\n}) {\n  const separateGroups = memoizeOne(groups => {\n    return {\n      incomeGroup: groups.find(group => group.is_income),\n      expenseGroups: groups.filter(group => !group.is_income),\n    };\n  });\n\n  const { incomeGroup, expenseGroups } = separateGroups(categoryGroups);\n  const [collapsedGroupIds = [], setCollapsedGroupIdsPref] =\n    useLocalPref('budget.collapsed');\n\n  const onToggleCollapse = id => {\n    setCollapsedGroupIdsPref(\n      collapsedGroupIds.includes(id)\n        ? collapsedGroupIds.filter(collapsedId => collapsedId !== id)\n        : [...collapsedGroupIds, id],\n    );\n  };\n\n  return (\n    <View\n      data-testid=\"budget-groups\"\n      style={{ flex: '1 0 auto', overflowY: 'auto', paddingBottom: 15 }}\n    >\n      {expenseGroups\n        .filter(group => !group.hidden || showHiddenCategories)\n        .map(group => {\n          return (\n            <ExpenseGroup\n              key={group.id}\n              type={type}\n              group={group}\n              showBudgetedCol={showBudgetedCol}\n              gestures={gestures}\n              month={month}\n              editMode={editMode}\n              onEditGroup={onEditGroup}\n              onEditCategory={onEditCategory}\n              onSaveCategory={onSaveCategory}\n              onDeleteCategory={onDeleteCategory}\n              onAddCategory={onAddCategory}\n              onReorderCategory={onReorderCategory}\n              onReorderGroup={onReorderGroup}\n              onBudgetAction={onBudgetAction}\n              show3Cols={show3Cols}\n              showHiddenCategories={showHiddenCategories}\n              collapsed={collapsedGroupIds.includes(group.id)}\n              onToggleCollapse={onToggleCollapse}\n            />\n          );\n        })}\n\n      {incomeGroup && (\n        <IncomeGroup\n          type={type}\n          group={incomeGroup}\n          month={month}\n          onAddCategory={onAddCategory}\n          onSaveCategory={onSaveCategory}\n          onDeleteCategory={onDeleteCategory}\n          showHiddenCategories={showHiddenCategories}\n          editMode={editMode}\n          onEditGroup={onEditGroup}\n          onEditCategory={onEditCategory}\n          onBudgetAction={onBudgetAction}\n          collapsed={collapsedGroupIds.includes(incomeGroup.id)}\n          onToggleCollapse={onToggleCollapse}\n        />\n      )}\n    </View>\n  );\n}\n\nexport function BudgetTable({\n  type,\n  categoryGroups,\n  month,\n  monthBounds,\n  // editMode,\n  onPrevMonth,\n  onNextMonth,\n  onSaveGroup,\n  onDeleteGroup,\n  onAddCategory,\n  onSaveCategory,\n  onDeleteCategory,\n  onReorderCategory,\n  onReorderGroup,\n  onShowBudgetSummary,\n  onBudgetAction,\n  onRefresh,\n  onEditGroup,\n  onEditCategory,\n  onOpenBudgetPageMenu,\n  onOpenBudgetMonthMenu,\n}) {\n  const { width } = useResponsive();\n  const show3Cols = width >= 360;\n\n  // let editMode = false; // neuter editMode -- sorry, not rewriting drag-n-drop right now\n\n  const [showSpentColumn = false, setShowSpentColumnPref] = useLocalPref(\n    'mobile.showSpentColumn',\n  );\n\n  function toggleSpentColumn() {\n    setShowSpentColumnPref(!showSpentColumn);\n  }\n\n  const [showHiddenCategories = false] = useLocalPref(\n    'budget.showHiddenCategories',\n  );\n  const noBackgroundColorStyle = {\n    backgroundColor: 'transparent',\n    color: 'white',\n  };\n\n  return (\n    <Page\n      padding={0}\n      header={\n        <MobilePageHeader\n          title={\n            <MonthSelector\n              month={month}\n              monthBounds={monthBounds}\n              onOpenMonthMenu={onOpenBudgetMonthMenu}\n              onPrevMonth={onPrevMonth}\n              onNextMonth={onNextMonth}\n            />\n          }\n          leftContent={\n            <Button\n              type=\"bare\"\n              style={{\n                color: theme.mobileHeaderText,\n                margin: 10,\n              }}\n              hoveredStyle={noBackgroundColorStyle}\n              activeStyle={noBackgroundColorStyle}\n              onPointerUp={e => {\n                e.stopPropagation();\n                onOpenBudgetPageMenu?.();\n              }}\n            >\n              <SvgLogo width=\"20\" height=\"20\" />\n              <SvgCheveronRight\n                style={{ flexShrink: 0, color: theme.mobileHeaderTextSubdued }}\n                width=\"14\"\n                height=\"14\"\n              />\n            </Button>\n          }\n        />\n      }\n    >\n      <BudgetTableHeader\n        type={type}\n        month={month}\n        show3Cols={show3Cols}\n        showSpentColumn={showSpentColumn}\n        toggleSpentColumn={toggleSpentColumn}\n        onShowBudgetSummary={onShowBudgetSummary}\n      />\n      <PullToRefresh onRefresh={onRefresh}>\n        <View\n          data-testid=\"budget-table\"\n          style={{\n            backgroundColor: theme.pageBackground,\n            paddingBottom: MOBILE_NAV_HEIGHT,\n          }}\n        >\n          <BudgetGroups\n            type={type}\n            categoryGroups={categoryGroups}\n            showBudgetedCol={!showSpentColumn}\n            show3Cols={show3Cols}\n            showHiddenCategories={showHiddenCategories}\n            month={month}\n            // gestures={gestures}\n            // editMode={editMode}\n            onEditGroup={onEditGroup}\n            onEditCategory={onEditCategory}\n            onSaveCategory={onSaveCategory}\n            onDeleteCategory={onDeleteCategory}\n            onAddCategory={onAddCategory}\n            onSaveGroup={onSaveGroup}\n            onDeleteGroup={onDeleteGroup}\n            onReorderCategory={onReorderCategory}\n            onReorderGroup={onReorderGroup}\n            onBudgetAction={onBudgetAction}\n          />\n        </View>\n      </PullToRefresh>\n    </Page>\n  );\n}\n\nfunction BudgetTableHeader({\n  show3Cols,\n  type,\n  month,\n  onShowBudgetSummary,\n  showSpentColumn,\n  toggleSpentColumn,\n}) {\n  const format = useFormat();\n  const buttonStyle = {\n    padding: 0,\n    backgroundColor: 'transparent',\n    borderRadius: 'unset',\n  };\n  const sidebarColumnWidth = getColumnWidth({ show3Cols, isSidebar: true });\n  const columnWidth = getColumnWidth({ show3Cols });\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        flexShrink: 0,\n        padding: '10px 15px',\n        paddingLeft: 10,\n        backgroundColor: theme.tableRowHeaderBackground,\n        borderBottomWidth: 1,\n        borderColor: theme.tableBorder,\n      }}\n    >\n      <View\n        style={{\n          width: sidebarColumnWidth,\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          alignItems: 'center',\n        }}\n      >\n        {type === 'report' ? (\n          <Saved\n            projected={month >= monthUtils.currentMonth()}\n            onClick={onShowBudgetSummary}\n            show3Cols={show3Cols}\n          />\n        ) : (\n          <ToBudget\n            toBudget={rolloverBudget.toBudget}\n            onClick={onShowBudgetSummary}\n            show3Cols={show3Cols}\n          />\n        )}\n      </View>\n      <View\n        style={{\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n        }}\n      >\n        {(show3Cols || !showSpentColumn) && (\n          <View\n            style={{\n              width: columnWidth,\n              alignItems: 'flex-end',\n            }}\n          >\n            <Button\n              type=\"bare\"\n              disabled={show3Cols}\n              onPointerUp={e => {\n                e.stopPropagation();\n                toggleSpentColumn();\n              }}\n              style={buttonStyle}\n            >\n              <View style={{ alignItems: 'flex-end' }}>\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                  {!show3Cols && (\n                    <SvgViewShow\n                      width={12}\n                      height={12}\n                      style={{\n                        color: theme.pageTextSubdued,\n                        marginRight: 5,\n                      }}\n                    />\n                  )}\n                  <Label\n                    title=\"Budgeted\"\n                    style={{ color: theme.formInputText }}\n                  />\n                </View>\n                <CellValue\n                  binding={\n                    type === 'report'\n                      ? reportBudget.totalBudgetedExpense\n                      : rolloverBudget.totalBudgeted\n                  }\n                  type=\"financial\"\n                  formatter={value => (\n                    <AutoTextSize\n                      key={value}\n                      as={Text}\n                      minFontSizePx={6}\n                      maxFontSizePx={12}\n                      mode=\"oneline\"\n                      style={{\n                        maxWidth: columnWidth,\n                        color: theme.formInputText,\n                        paddingLeft: 5,\n                        textAlign: 'right',\n                        fontSize: 12,\n                        fontWeight: '500',\n                      }}\n                    >\n                      {format(value, 'financial')}\n                    </AutoTextSize>\n                  )}\n                />\n              </View>\n            </Button>\n          </View>\n        )}\n        {(show3Cols || showSpentColumn) && (\n          <View\n            style={{\n              width: columnWidth,\n              alignItems: 'flex-end',\n            }}\n          >\n            <Button\n              type=\"bare\"\n              disabled={show3Cols}\n              onPointerUp={e => {\n                e.stopPropagation();\n                toggleSpentColumn();\n              }}\n              style={buttonStyle}\n            >\n              <View style={{ alignItems: 'flex-end' }}>\n                <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n                  {!show3Cols && (\n                    <SvgViewShow\n                      width={12}\n                      height={12}\n                      style={{\n                        color: theme.pageTextSubdued,\n                        marginRight: 5,\n                      }}\n                    />\n                  )}\n                  <Label title=\"Spent\" style={{ color: theme.formInputText }} />\n                </View>\n                <CellValue\n                  binding={\n                    type === 'report'\n                      ? reportBudget.totalSpent\n                      : rolloverBudget.totalSpent\n                  }\n                  type=\"financial\"\n                  formatter={value => (\n                    <AutoTextSize\n                      key={value}\n                      as={Text}\n                      minFontSizePx={6}\n                      maxFontSizePx={12}\n                      mode=\"oneline\"\n                      style={{\n                        maxWidth: columnWidth,\n                        color: theme.formInputText,\n                        paddingLeft: 5,\n                        textAlign: 'right',\n                        fontSize: 12,\n                        fontWeight: '500',\n                      }}\n                    >\n                      {format(value, 'financial')}\n                    </AutoTextSize>\n                  )}\n                />\n              </View>\n            </Button>\n          </View>\n        )}\n        <View\n          style={{\n            width: columnWidth,\n            alignItems: 'flex-end',\n          }}\n        >\n          <Label title=\"Balance\" style={{ color: theme.formInputText }} />\n          <CellValue\n            binding={\n              type === 'report'\n                ? reportBudget.totalLeftover\n                : rolloverBudget.totalBalance\n            }\n            type=\"financial\"\n            formatter={value => (\n              <AutoTextSize\n                key={value}\n                as={Text}\n                minFontSizePx={6}\n                maxFontSizePx={12}\n                mode=\"oneline\"\n                style={{\n                  maxWidth: columnWidth,\n                  color: theme.formInputText,\n                  paddingLeft: 5,\n                  textAlign: 'right',\n                  fontSize: 12,\n                  fontWeight: '500',\n                }}\n              >\n                {format(value, 'financial')}\n              </AutoTextSize>\n            )}\n          />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nfunction MonthSelector({\n  month,\n  monthBounds,\n  onOpenMonthMenu,\n  onPrevMonth,\n  onNextMonth,\n}) {\n  const prevEnabled = month > monthBounds.start;\n  const nextEnabled = month < monthUtils.subMonths(monthBounds.end, 1);\n\n  const arrowButtonStyle = {\n    padding: 10,\n    margin: 2,\n  };\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'row',\n      }}\n    >\n      <Button\n        type=\"bare\"\n        onPointerUp={e => {\n          e.stopPropagation();\n          if (prevEnabled) {\n            onPrevMonth();\n          }\n        }}\n        style={{\n          ...styles.noTapHighlight,\n          ...arrowButtonStyle,\n          opacity: prevEnabled ? 1 : 0.6,\n          color: theme.mobileHeaderText,\n        }}\n        hoveredStyle={{\n          color: theme.mobileHeaderText,\n          background: theme.mobileHeaderTextHover,\n        }}\n      >\n        <SvgArrowThinLeft width=\"15\" height=\"15\" style={{ margin: -5 }} />\n      </Button>\n      <Text\n        style={{\n          color: theme.mobileHeaderText,\n          textAlign: 'center',\n          fontSize: 16,\n          fontWeight: 500,\n          margin: '0 5px',\n          ...styles.underlinedText,\n        }}\n        onPointerUp={e => {\n          e.stopPropagation();\n          onOpenMonthMenu?.(month);\n        }}\n      >\n        {monthUtils.format(month, 'MMMM ‘yy')}\n      </Text>\n      <Button\n        type=\"bare\"\n        onPointerUp={e => {\n          e.stopPropagation();\n          if (nextEnabled) {\n            onNextMonth();\n          }\n        }}\n        style={{\n          ...styles.noTapHighlight,\n          ...arrowButtonStyle,\n          opacity: nextEnabled ? 1 : 0.6,\n          color: theme.mobileHeaderText,\n        }}\n        hoveredStyle={{\n          color: theme.mobileHeaderText,\n          background: theme.mobileHeaderTextHover,\n        }}\n      >\n        <SvgArrowThinRight width=\"15\" height=\"15\" style={{ margin: -5 }} />\n      </Button>\n    </View>\n  );\n}\n","// @ts-strict-ignore\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  applyBudgetAction,\n  collapseModals,\n  createCategory,\n  createGroup,\n  deleteCategory,\n  deleteGroup,\n  getCategories,\n  moveCategory,\n  moveCategoryGroup,\n  pushModal,\n  updateCategory,\n  updateGroup,\n  sync,\n} from 'loot-core/client/actions';\nimport { useSpreadsheet } from 'loot-core/src/client/SpreadsheetProvider';\nimport { send, listen } from 'loot-core/src/platform/client/fetch';\nimport * as monthUtils from 'loot-core/src/shared/months';\nimport {\n  type CategoryEntity,\n  type CategoryGroupEntity,\n} from 'loot-core/src/types/models';\n\nimport { useCategories } from '../../../hooks/useCategories';\nimport { useLocalPref } from '../../../hooks/useLocalPref';\nimport { useSetThemeColor } from '../../../hooks/useSetThemeColor';\nimport { AnimatedLoading } from '../../../icons/AnimatedLoading';\nimport { theme } from '../../../style';\nimport { prewarmMonth } from '../../budget/util';\nimport { View } from '../../common/View';\nimport { NamespaceContext } from '../../spreadsheet/NamespaceContext';\nimport { SyncRefresh } from '../../SyncRefresh';\n\nimport { BudgetTable } from './BudgetTable';\n\ntype BudgetInnerProps = {\n  categories: CategoryEntity[];\n  categoryGroups: CategoryGroupEntity[];\n  budgetType: 'rollover' | 'report';\n  spreadsheet: ReturnType<typeof useSpreadsheet>;\n};\n\nfunction BudgetInner(props: BudgetInnerProps) {\n  const { categoryGroups, categories, budgetType, spreadsheet } = props;\n\n  const currMonth = monthUtils.currentMonth();\n  const [startMonth = currMonth, setStartMonthPref] =\n    useLocalPref('budget.startMonth');\n  const [bounds, setBounds] = useState({\n    start: startMonth,\n    end: startMonth,\n  });\n  const [initialized, setInitialized] = useState(false);\n  // const [editMode, setEditMode] = useState(false);\n\n  const [_numberFormat] = useLocalPref('numberFormat');\n  const numberFormat = _numberFormat || 'comma-dot';\n  const [hideFraction = false] = useLocalPref('hideFraction');\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function init() {\n      const { start, end } = await send('get-budget-bounds');\n      setBounds({ start, end });\n\n      await prewarmMonth(budgetType, spreadsheet, startMonth);\n\n      setInitialized(true);\n    }\n\n    init();\n\n    const unlisten = listen('sync-event', ({ type, tables }) => {\n      if (\n        type === 'success' &&\n        (tables.includes('categories') ||\n          tables.includes('category_mapping') ||\n          tables.includes('category_groups'))\n      ) {\n        // TODO: is this loading every time?\n        dispatch(getCategories());\n      }\n    });\n\n    return () => unlisten();\n  }, [budgetType, startMonth, dispatch, spreadsheet]);\n\n  const onBudgetAction = async (month, type, args) => {\n    dispatch(applyBudgetAction(month, type, args));\n  };\n\n  const onShowBudgetSummary = () => {\n    if (budgetType === 'report') {\n      dispatch(\n        pushModal('report-budget-summary', {\n          month: startMonth,\n        }),\n      );\n    } else {\n      dispatch(\n        pushModal('rollover-budget-summary', {\n          month: startMonth,\n          onBudgetAction,\n        }),\n      );\n    }\n  };\n\n  const onOpenNewCategoryGroupModal = () => {\n    dispatch(\n      pushModal('new-category-group', {\n        onValidate: name => (!name ? 'Name is required.' : null),\n        onSubmit: async name => {\n          dispatch(collapseModals('budget-page-menu'));\n          dispatch(createGroup(name));\n        },\n      }),\n    );\n  };\n\n  const onOpenNewCategoryModal = (groupId, isIncome) => {\n    dispatch(\n      pushModal('new-category', {\n        onValidate: name => (!name ? 'Name is required.' : null),\n        onSubmit: async name => {\n          dispatch(collapseModals('category-group-menu'));\n          dispatch(createCategory(name, groupId, isIncome, false));\n        },\n      }),\n    );\n  };\n\n  const onSaveGroup = group => {\n    dispatch(updateGroup(group));\n  };\n\n  const onDeleteGroup = async groupId => {\n    const group = categoryGroups?.find(g => g.id === groupId);\n\n    if (!group) {\n      return;\n    }\n\n    let mustTransfer = false;\n    for (const category of group.categories ?? []) {\n      if (await send('must-category-transfer', { id: category.id })) {\n        mustTransfer = true;\n        break;\n      }\n    }\n\n    if (mustTransfer) {\n      dispatch(\n        pushModal('confirm-category-delete', {\n          group: groupId,\n          onDelete: transferCategory => {\n            dispatch(collapseModals('category-group-menu'));\n            dispatch(deleteGroup(groupId, transferCategory));\n          },\n        }),\n      );\n    } else {\n      dispatch(collapseModals('category-group-menu'));\n      dispatch(deleteGroup(groupId));\n    }\n  };\n\n  const onToggleGroupVisibility = groupId => {\n    const group = categoryGroups.find(g => g.id === groupId);\n    onSaveGroup({\n      ...group,\n      hidden: !!!group.hidden,\n    });\n    dispatch(collapseModals('category-group-menu'));\n  };\n\n  const onSaveCategory = category => {\n    dispatch(updateCategory(category));\n  };\n\n  const onDeleteCategory = async categoryId => {\n    const mustTransfer = await send('must-category-transfer', {\n      id: categoryId,\n    });\n\n    if (mustTransfer) {\n      dispatch(\n        pushModal('confirm-category-delete', {\n          category: categoryId,\n          onDelete: transferCategory => {\n            if (categoryId !== transferCategory) {\n              dispatch(collapseModals('category-menu'));\n              dispatch(deleteCategory(categoryId, transferCategory));\n            }\n          },\n        }),\n      );\n    } else {\n      dispatch(collapseModals('category-menu'));\n      dispatch(deleteCategory(categoryId));\n    }\n  };\n\n  const onToggleCategoryVisibility = categoryId => {\n    const category = categories.find(c => c.id === categoryId);\n    onSaveCategory({\n      ...category,\n      hidden: !!!category.hidden,\n    });\n    dispatch(collapseModals('category-menu'));\n  };\n\n  const onReorderCategory = (id, { inGroup, aroundCategory }) => {\n    let groupId, targetId;\n\n    if (inGroup) {\n      groupId = inGroup;\n    } else if (aroundCategory) {\n      const { id: originalCatId, position } = aroundCategory;\n\n      let catId = originalCatId;\n      const group = categoryGroups.find(group =>\n        group.categories?.find(cat => cat.id === catId),\n      );\n\n      if (position === 'bottom') {\n        const idx = group?.categories?.findIndex(cat => cat.id === catId) ?? -1;\n        catId = group?.categories\n          ? idx < group.categories.length - 1\n            ? group.categories[idx + 1].id\n            : null\n          : null;\n      }\n\n      groupId = group?.id;\n      targetId = catId;\n    }\n\n    dispatch(moveCategory(id, groupId, targetId));\n  };\n\n  const onReorderGroup = (id, targetId, position) => {\n    if (position === 'bottom') {\n      const idx = categoryGroups.findIndex(group => group.id === targetId);\n      targetId =\n        idx < categoryGroups.length - 1 ? categoryGroups[idx + 1].id : null;\n    }\n\n    dispatch(moveCategoryGroup(id, targetId));\n  };\n\n  const onPrevMonth = async () => {\n    const month = monthUtils.subMonths(startMonth, 1);\n    await prewarmMonth(budgetType, spreadsheet, month);\n    setStartMonthPref(month);\n    setInitialized(true);\n  };\n\n  const onNextMonth = async () => {\n    const month = monthUtils.addMonths(startMonth, 1);\n    await prewarmMonth(budgetType, spreadsheet, month);\n    setStartMonthPref(month);\n    setInitialized(true);\n  };\n\n  // const onOpenMonthActionMenu = () => {\n  //   const options = [\n  //     'Copy last month’s budget',\n  //     'Set budgets to zero',\n  //     'Set budgets to 3 month average',\n  //     budgetType === 'report' && 'Apply to all future budgets',\n  //   ].filter(Boolean);\n\n  //   props.showActionSheetWithOptions(\n  //     {\n  //       options,\n  //       cancelButtonIndex: options.length - 1,\n  //       title: 'Actions',\n  //     },\n  //     idx => {\n  //       switch (idx) {\n  //         case 0:\n  //           setEditMode(true);\n  //           break;\n  //         case 1:\n  //           onBudgetAction('copy-last');\n  //           break;\n  //         case 2:\n  //           onBudgetAction('set-zero');\n  //           break;\n  //         case 3:\n  //           onBudgetAction('set-3-avg');\n  //           break;\n  //         case 4:\n  //           if (budgetType === 'report') {\n  //             onBudgetAction('set-all-future');\n  //           }\n  //           break;\n  //         default:\n  //       }\n  //     },\n  //   );\n  // };\n\n  const onSaveNotes = async (id, notes) => {\n    await send('notes-save', { id, note: notes });\n  };\n\n  const onOpenCategoryGroupNotesModal = id => {\n    const group = categoryGroups.find(g => g.id === id);\n    dispatch(\n      pushModal('notes', {\n        id,\n        name: group.name,\n        onSave: onSaveNotes,\n      }),\n    );\n  };\n\n  const onOpenCategoryNotesModal = id => {\n    const category = categories.find(c => c.id === id);\n    dispatch(\n      pushModal('notes', {\n        id,\n        name: category.name,\n        onSave: onSaveNotes,\n      }),\n    );\n  };\n\n  const onOpenCategoryGroupMenuModal = id => {\n    const group = categoryGroups.find(g => g.id === id);\n    dispatch(\n      pushModal('category-group-menu', {\n        groupId: group.id,\n        onSave: onSaveGroup,\n        onAddCategory: onOpenNewCategoryModal,\n        onEditNotes: onOpenCategoryGroupNotesModal,\n        onDelete: onDeleteGroup,\n        onToggleVisibility: onToggleGroupVisibility,\n      }),\n    );\n  };\n\n  const onOpenCategoryMenuModal = id => {\n    const category = categories.find(c => c.id === id);\n    dispatch(\n      pushModal('category-menu', {\n        categoryId: category.id,\n        onSave: onSaveCategory,\n        onEditNotes: onOpenCategoryNotesModal,\n        onDelete: onDeleteCategory,\n        onToggleVisibility: onToggleCategoryVisibility,\n        onBudgetAction,\n      }),\n    );\n  };\n\n  const [showHiddenCategories, setShowHiddenCategoriesPref] = useLocalPref(\n    'budget.showHiddenCategories',\n  );\n\n  const onToggleHiddenCategories = () => {\n    setShowHiddenCategoriesPref(!showHiddenCategories);\n    dispatch(collapseModals('budget-page-menu'));\n  };\n\n  const onOpenBudgetMonthNotesModal = month => {\n    dispatch(\n      pushModal('notes', {\n        id: `budget-${month}`,\n        name: monthUtils.format(month, 'MMMM ‘yy'),\n        onSave: onSaveNotes,\n      }),\n    );\n  };\n\n  const onSwitchBudgetFile = () => {\n    dispatch(pushModal('budget-list'));\n  };\n\n  const onOpenBudgetMonthMenu = month => {\n    dispatch(\n      pushModal(`${budgetType}-budget-month-menu`, {\n        month,\n        onBudgetAction,\n        onEditNotes: onOpenBudgetMonthNotesModal,\n      }),\n    );\n  };\n\n  const onOpenBudgetPageMenu = () => {\n    dispatch(\n      pushModal('budget-page-menu', {\n        onAddCategoryGroup: onOpenNewCategoryGroupModal,\n        onToggleHiddenCategories,\n        onSwitchBudgetFile,\n      }),\n    );\n  };\n\n  if (!categoryGroups || !initialized) {\n    return (\n      <View\n        style={{\n          flex: 1,\n          backgroundColor: theme.mobilePageBackground,\n          alignItems: 'center',\n          justifyContent: 'center',\n          marginBottom: 25,\n        }}\n      >\n        <AnimatedLoading width={25} height={25} />\n      </View>\n    );\n  }\n\n  return (\n    <NamespaceContext.Provider value={monthUtils.sheetForMonth(startMonth)}>\n      <SyncRefresh\n        onSync={async () => {\n          dispatch(sync());\n        }}\n      >\n        {({ onRefresh }) => (\n          <BudgetTable\n            // This key forces the whole table rerender when the number\n            // format changes\n            key={`${numberFormat}${hideFraction}`}\n            categoryGroups={categoryGroups}\n            type={budgetType}\n            month={startMonth}\n            monthBounds={bounds}\n            // editMode={editMode}\n            onShowBudgetSummary={onShowBudgetSummary}\n            onPrevMonth={onPrevMonth}\n            onNextMonth={onNextMonth}\n            onSaveGroup={onSaveGroup}\n            onDeleteGroup={onDeleteGroup}\n            onAddCategory={onOpenNewCategoryModal}\n            onSaveCategory={onSaveCategory}\n            onDeleteCategory={onDeleteCategory}\n            onReorderCategory={onReorderCategory}\n            onReorderGroup={onReorderGroup}\n            onBudgetAction={onBudgetAction}\n            onRefresh={onRefresh}\n            onEditGroup={onOpenCategoryGroupMenuModal}\n            onEditCategory={onOpenCategoryMenuModal}\n            onOpenBudgetPageMenu={onOpenBudgetPageMenu}\n            onOpenBudgetMonthMenu={onOpenBudgetMonthMenu}\n          />\n        )}\n      </SyncRefresh>\n    </NamespaceContext.Provider>\n  );\n}\n\nexport function Budget() {\n  const { list: categories, grouped: categoryGroups } = useCategories();\n  const [_budgetType] = useLocalPref('budgetType');\n  const budgetType = _budgetType || 'rollover';\n  const spreadsheet = useSpreadsheet();\n  useSetThemeColor(theme.mobileViewTheme);\n  return (\n    <BudgetInner\n      categoryGroups={categoryGroups}\n      categories={categories}\n      budgetType={budgetType}\n      spreadsheet={spreadsheet}\n    />\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { replaceModal, syncAndDownload } from 'loot-core/src/client/actions';\nimport * as queries from 'loot-core/src/client/queries';\n\nimport { useAccounts } from '../../../hooks/useAccounts';\nimport { useFailedAccounts } from '../../../hooks/useFailedAccounts';\nimport { useLocalPref } from '../../../hooks/useLocalPref';\nimport { useNavigate } from '../../../hooks/useNavigate';\nimport { useSetThemeColor } from '../../../hooks/useSetThemeColor';\nimport { SvgAdd } from '../../../icons/v1';\nimport { theme, styles } from '../../../style';\nimport { makeAmountFullStyle } from '../../budget/util';\nimport { Button } from '../../common/Button2';\nimport { Text } from '../../common/Text';\nimport { TextOneLine } from '../../common/TextOneLine';\nimport { View } from '../../common/View';\nimport { MobilePageHeader, Page } from '../../Page';\nimport { CellValue } from '../../spreadsheet/CellValue';\nimport { MOBILE_NAV_HEIGHT } from '../MobileNavTabs';\nimport { PullToRefresh } from '../PullToRefresh';\n\nfunction AccountHeader({ name, amount, style = {} }) {\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: 'row',\n        marginTop: 10,\n        marginRight: 10,\n        color: theme.pageTextLight,\n        width: '100%',\n        ...style,\n      }}\n    >\n      <View style={{ flex: 1 }}>\n        <Text\n          style={{\n            ...styles.text,\n            fontSize: 14,\n          }}\n          data-testid=\"name\"\n        >\n          {name}\n        </Text>\n      </View>\n      <CellValue\n        binding={amount}\n        style={{ ...styles.text, fontSize: 14 }}\n        type=\"financial\"\n      />\n    </View>\n  );\n}\n\nfunction AccountCard({\n  account,\n  updated,\n  connected,\n  pending,\n  failed,\n  getBalanceQuery,\n  onSelect,\n}) {\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: 'row',\n        backgroundColor: theme.tableBackground,\n        boxShadow: `0 1px 1px ${theme.mobileAccountShadow}`,\n        borderRadius: 6,\n        marginTop: 10,\n        marginRight: 10,\n        width: '100%',\n      }}\n      data-testid=\"account\"\n    >\n      <Button\n        onPress={() => onSelect(account.id)}\n        style={({ isPressed }) => ({\n          flexDirection: 'row',\n          border: '1px solid ' + theme.pillBorder,\n          flex: 1,\n          alignItems: 'center',\n          borderRadius: 6,\n          ...(isPressed && {\n            opacity: 0.1,\n          }),\n        })}\n      >\n        <View\n          style={{\n            flex: 1,\n            margin: '10px 0',\n          }}\n        >\n          <View\n            style={{\n              flexDirection: 'row',\n              alignItems: 'center',\n            }}\n          >\n            {account.bankId && (\n              <View\n                style={{\n                  backgroundColor: pending\n                    ? theme.sidebarItemBackgroundPending\n                    : failed\n                      ? theme.sidebarItemBackgroundFailed\n                      : theme.sidebarItemBackgroundPositive,\n                  marginRight: '8px',\n                  width: 8,\n                  height: 8,\n                  borderRadius: 8,\n                  opacity: connected ? 1 : 0,\n                }}\n              />\n            )}\n            <TextOneLine\n              style={{\n                ...styles.text,\n                fontSize: 17,\n                fontWeight: 600,\n                color: updated ? theme.mobileAccountText : theme.pillText,\n                paddingRight: 30,\n              }}\n              data-testid=\"account-name\"\n            >\n              {account.name}\n            </TextOneLine>\n          </View>\n        </View>\n        <CellValue\n          binding={getBalanceQuery(account)}\n          type=\"financial\"\n          style={{ fontSize: 16, color: 'inherit' }}\n          getStyle={makeAmountFullStyle}\n          data-testid=\"account-balance\"\n        />\n      </Button>\n    </View>\n  );\n}\n\nfunction EmptyMessage() {\n  return (\n    <View style={{ flex: 1, padding: 30 }}>\n      <Text style={styles.text}>\n        For Actual to be useful, you need to add an account. You can link an\n        account to automatically download transactions, or manage it locally\n        yourself.\n      </Text>\n    </View>\n  );\n}\n\nfunction AccountList({\n  accounts,\n  updatedAccounts,\n  getBalanceQuery,\n  getOnBudgetBalance,\n  getOffBudgetBalance,\n  onAddAccount,\n  onSelectAccount,\n  onSync,\n}) {\n  const failedAccounts = useFailedAccounts();\n  const syncingAccountIds = useSelector(state => state.account.accountsSyncing);\n  const budgetedAccounts = accounts.filter(account => account.offbudget === 0);\n  const offbudgetAccounts = accounts.filter(account => account.offbudget === 1);\n  const noBackgroundColorStyle = {\n    backgroundColor: 'transparent',\n    color: 'white',\n  };\n\n  return (\n    <Page\n      header={\n        <MobilePageHeader\n          title=\"Accounts\"\n          rightContent={\n            <Button\n              variant=\"bare\"\n              style={({ isHovered, isPressed }) => ({\n                color: theme.mobileHeaderText,\n                margin: 10,\n                ...(isHovered || isPressed ? noBackgroundColorStyle : {}),\n              })}\n              onPress={onAddAccount}\n            >\n              <SvgAdd width={20} height={20} />\n            </Button>\n          }\n        />\n      }\n      padding={0}\n      style={{\n        paddingBottom: MOBILE_NAV_HEIGHT,\n      }}\n    >\n      {accounts.length === 0 && <EmptyMessage />}\n      <PullToRefresh onRefresh={onSync}>\n        <View style={{ margin: 10 }}>\n          {budgetedAccounts.length > 0 && (\n            <AccountHeader name=\"For Budget\" amount={getOnBudgetBalance()} />\n          )}\n          {budgetedAccounts.map(acct => (\n            <AccountCard\n              account={acct}\n              key={acct.id}\n              updated={updatedAccounts && updatedAccounts.includes(acct.id)}\n              connected={!!acct.bank}\n              pending={syncingAccountIds.includes(acct.id)}\n              failed={failedAccounts && failedAccounts.has(acct.id)}\n              getBalanceQuery={getBalanceQuery}\n              onSelect={onSelectAccount}\n            />\n          ))}\n\n          {offbudgetAccounts.length > 0 && (\n            <AccountHeader\n              name=\"Off Budget\"\n              amount={getOffBudgetBalance()}\n              style={{ marginTop: 30 }}\n            />\n          )}\n          {offbudgetAccounts.map(acct => (\n            <AccountCard\n              account={acct}\n              key={acct.id}\n              updated={updatedAccounts && updatedAccounts.includes(acct.id)}\n              connected={!!acct.bank}\n              pending={syncingAccountIds.includes(acct.id)}\n              failed={failedAccounts && failedAccounts.has(acct.id)}\n              getBalanceQuery={getBalanceQuery}\n              onSelect={onSelectAccount}\n            />\n          ))}\n        </View>\n      </PullToRefresh>\n    </Page>\n  );\n}\n\nexport function Accounts() {\n  const dispatch = useDispatch();\n  const accounts = useAccounts();\n  const updatedAccounts = useSelector(state => state.queries.updatedAccounts);\n  const [_numberFormat] = useLocalPref('numberFormat');\n  const numberFormat = _numberFormat || 'comma-dot';\n  const [hideFraction = false] = useLocalPref('hideFraction');\n\n  const navigate = useNavigate();\n\n  const onSelectAccount = id => {\n    navigate(`/accounts/${id}`);\n  };\n\n  const onAddAccount = () => {\n    dispatch(replaceModal('add-account'));\n  };\n\n  const onSync = () => {\n    dispatch(syncAndDownload());\n  };\n\n  useSetThemeColor(theme.mobileViewTheme);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <AccountList\n        // This key forces the whole table rerender when the number\n        // format changes\n        key={numberFormat + hideFraction}\n        accounts={accounts.filter(account => !account.closed)}\n        updatedAccounts={updatedAccounts}\n        getBalanceQuery={queries.accountBalance}\n        getOnBudgetBalance={queries.budgetedAccountBalance}\n        getOffBudgetBalance={queries.offbudgetAccountBalance}\n        onAddAccount={onAddAccount}\n        onSelectAccount={onSelectAccount}\n        onSync={onSync}\n      />\n    </View>\n  );\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { useDebounceCallback } from 'usehooks-ts';\n\nimport {\n  collapseModals,\n  getPayees,\n  markAccountRead,\n  openAccountCloseModal,\n  pushModal,\n  reopenAccount,\n  syncAndDownload,\n  updateAccount,\n} from 'loot-core/client/actions';\nimport {\n  SchedulesProvider,\n  useDefaultSchedulesQueryTransform,\n} from 'loot-core/client/data-hooks/schedules';\nimport * as queries from 'loot-core/client/queries';\nimport { pagedQuery } from 'loot-core/client/query-helpers';\nimport { listen, send } from 'loot-core/platform/client/fetch';\nimport { isPreviewId } from 'loot-core/shared/transactions';\n\nimport { useDateFormat } from '../../../hooks/useDateFormat';\nimport { useLocalPref } from '../../../hooks/useLocalPref';\nimport { useNavigate } from '../../../hooks/useNavigate';\nimport { usePreviewTransactions } from '../../../hooks/usePreviewTransactions';\nimport { styles, theme } from '../../../style';\nimport { Text } from '../../common/Text';\nimport { View } from '../../common/View';\nimport { MobilePageHeader, Page } from '../../Page';\nimport { MobileBackButton } from '../MobileBackButton';\nimport { AddTransactionButton } from '../transactions/AddTransactionButton';\nimport { TransactionListWithBalances } from '../transactions/TransactionListWithBalances';\n\nexport function AccountTransactions({ account, pending, failed }) {\n  const schedulesTransform = useDefaultSchedulesQueryTransform(account.id);\n  return (\n    <Page\n      header={\n        <MobilePageHeader\n          title={\n            <AccountName account={account} pending={pending} failed={failed} />\n          }\n          leftContent={<MobileBackButton />}\n          rightContent={<AddTransactionButton accountId={account.id} />}\n        />\n      }\n      padding={0}\n    >\n      <SchedulesProvider transform={schedulesTransform}>\n        <TransactionListWithPreviews account={account} />\n      </SchedulesProvider>\n    </Page>\n  );\n}\n\nfunction AccountName({ account, pending, failed }) {\n  const dispatch = useDispatch();\n\n  const onSave = account => {\n    dispatch(updateAccount(account));\n  };\n\n  const onSaveNotes = async (id, notes) => {\n    await send('notes-save', { id, note: notes });\n  };\n\n  const onEditNotes = id => {\n    dispatch(\n      pushModal('notes', {\n        id: `account-${id}`,\n        name: account.name,\n        onSave: onSaveNotes,\n      }),\n    );\n  };\n\n  const onCloseAccount = () => {\n    dispatch(openAccountCloseModal(account.id));\n  };\n\n  const onReopenAccount = () => {\n    dispatch(reopenAccount(account.id));\n  };\n\n  const onClick = () => {\n    dispatch(\n      pushModal('account-menu', {\n        accountId: account.id,\n        onSave,\n        onEditNotes,\n        onCloseAccount,\n        onReopenAccount,\n      }),\n    );\n  };\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n      }}\n    >\n      {account.bankId && (\n        <div\n          style={{\n            margin: 'auto',\n            marginRight: 5,\n            width: 8,\n            height: 8,\n            borderRadius: 8,\n            backgroundColor: pending\n              ? theme.sidebarItemBackgroundPending\n              : failed\n                ? theme.sidebarItemBackgroundFailed\n                : theme.sidebarItemBackgroundPositive,\n            transition: 'transform .3s',\n          }}\n        />\n      )}\n      <Text\n        style={{ ...styles.underlinedText, ...styles.lineClamp(2) }}\n        onClick={onClick}\n      >\n        {`${account.closed ? 'Closed: ' : ''}${account.name}`}\n      </Text>\n    </View>\n  );\n}\n\nfunction TransactionListWithPreviews({ account }) {\n  const [currentQuery, setCurrentQuery] = useState();\n  const [isSearching, setIsSearching] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [transactions, setTransactions] = useState([]);\n  const prependTransactions = usePreviewTransactions();\n  const allTransactions = useMemo(\n    () =>\n      !isSearching ? prependTransactions.concat(transactions) : transactions,\n    [isSearching, prependTransactions, transactions],\n  );\n\n  const dateFormat = useDateFormat() || 'MM/dd/yyyy';\n  const [_numberFormat] = useLocalPref('numberFormat');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const onRefresh = async () => {\n    await dispatch(syncAndDownload(account.id));\n  };\n\n  const makeRootQuery = useCallback(\n    () => queries.makeTransactionsQuery(account.id).options({ splits: 'none' }),\n    [account.id],\n  );\n\n  const paged = useRef(null);\n\n  const updateQuery = useCallback(query => {\n    paged.current?.unsubscribe();\n    setIsLoading(true);\n    paged.current = pagedQuery(\n      query.options({ splits: 'none' }).select('*'),\n      data => {\n        setTransactions(data);\n        setIsLoading(false);\n      },\n      { pageCount: 50 },\n    );\n  }, []);\n\n  const fetchTransactions = useCallback(() => {\n    const query = makeRootQuery();\n    setCurrentQuery(query);\n    updateQuery(query);\n  }, [makeRootQuery, updateQuery]);\n\n  const refetchTransactions = () => {\n    paged.current?.run();\n  };\n\n  useEffect(() => {\n    const unlisten = listen('sync-event', ({ type, tables }) => {\n      if (type === 'applied') {\n        if (\n          tables.includes('transactions') ||\n          tables.includes('category_mapping') ||\n          tables.includes('payee_mapping')\n        ) {\n          refetchTransactions();\n        }\n\n        if (tables.includes('payees') || tables.includes('payee_mapping')) {\n          dispatch(getPayees());\n        }\n      }\n    });\n\n    fetchTransactions();\n    dispatch(markAccountRead(account.id));\n    return () => unlisten();\n  }, [account.id, dispatch, fetchTransactions]);\n\n  const updateSearchQuery = useDebounceCallback(\n    useCallback(\n      searchText => {\n        if (searchText === '' && currentQuery) {\n          updateQuery(currentQuery);\n        } else if (searchText && currentQuery) {\n          updateQuery(\n            queries.makeTransactionSearchQuery(\n              currentQuery,\n              searchText,\n              dateFormat,\n            ),\n          );\n        }\n\n        setIsSearching(searchText !== '');\n      },\n      [currentQuery, dateFormat, updateQuery],\n    ),\n    150,\n  );\n\n  const onSearch = text => {\n    updateSearchQuery(text);\n  };\n\n  const onSelectTransaction = transaction => {\n    if (!isPreviewId(transaction.id)) {\n      navigate(`/transactions/${transaction.id}`);\n    } else {\n      dispatch(\n        pushModal('scheduled-transaction-menu', {\n          transactionId: transaction.id,\n          onPost: async transactionId => {\n            const parts = transactionId.split('/');\n            await send('schedule/post-transaction', { id: parts[1] });\n            dispatch(collapseModals('scheduled-transaction-menu'));\n          },\n          onSkip: async transactionId => {\n            const parts = transactionId.split('/');\n            await send('schedule/skip-next-date', { id: parts[1] });\n            dispatch(collapseModals('scheduled-transaction-menu'));\n          },\n        }),\n      );\n    }\n  };\n\n  const onLoadMore = () => {\n    paged.current?.fetchNext();\n  };\n\n  const balance = queries.accountBalance(account);\n  const balanceCleared = queries.accountBalanceCleared(account);\n  const balanceUncleared = queries.accountBalanceUncleared(account);\n\n  return (\n    <TransactionListWithBalances\n      isLoading={isLoading}\n      transactions={allTransactions}\n      balance={balance}\n      balanceCleared={balanceCleared}\n      balanceUncleared={balanceUncleared}\n      onLoadMore={onLoadMore}\n      searchPlaceholder={`Search ${account.name}`}\n      onSearch={onSearch}\n      onSelectTransaction={onSelectTransaction}\n      onRefresh={onRefresh}\n    />\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { useAccount } from '../../../hooks/useAccount';\nimport { useFailedAccounts } from '../../../hooks/useFailedAccounts';\nimport { useLocalPref } from '../../../hooks/useLocalPref';\nimport { useNavigate } from '../../../hooks/useNavigate';\nimport { useSetThemeColor } from '../../../hooks/useSetThemeColor';\nimport { theme, styles } from '../../../style';\nimport { Button } from '../../common/Button';\nimport { Text } from '../../common/Text';\nimport { View } from '../../common/View';\n\nimport { AccountTransactions } from './AccountTransactions';\n\nexport function Account() {\n  const failedAccounts = useFailedAccounts();\n  const syncingAccountIds = useSelector(state => state.account.accountsSyncing);\n\n  const navigate = useNavigate();\n\n  const [_numberFormat] = useLocalPref('numberFormat');\n  const numberFormat = _numberFormat || 'comma-dot';\n  const [hideFraction = false] = useLocalPref('hideFraction');\n\n  const { id: accountId } = useParams();\n\n  useSetThemeColor(theme.mobileViewTheme);\n\n  const account = useAccount(accountId);\n\n  if (!account) {\n    return null;\n  }\n\n  if (\n    accountId === 'budgeted' ||\n    accountId === 'offbudget' ||\n    accountId === 'uncategorized'\n  ) {\n    return (\n      <View style={{ flex: 1, padding: 30 }}>\n        <Text style={(styles.text, { textAlign: 'center' })}>\n          There is no Mobile View at the moment\n        </Text>\n        <Button\n          type=\"normal\"\n          style={{ fontSize: 15, marginLeft: 10, marginTop: 10 }}\n          onClick={() => navigate('/accounts')}\n        >\n          Go back to Mobile Accounts\n        </Button>\n      </View>\n    );\n  }\n\n  return (\n    <AccountTransactions\n      // This key forces the whole table rerender when the number\n      // format changes\n      key={numberFormat + hideFraction}\n      account={account}\n      pending={syncingAccountIds.includes(account.id)}\n      failed={failedAccounts && failedAccounts.has(account.id)}\n    />\n  );\n}\n"],"names":["SvgArrowThickRight","props","_jsx","svg","xmlns","viewBox","style","color","path","d","fill","SvgArrowThinLeft","SyncRefresh","onSync","children","syncing","setSyncing","useState","onSync_","_Fragment","refreshing","onRefresh","Card","ref","View","marginTop","marginLeft","marginRight","borderRadius","backgroundColor","theme","cardBackground","borderColor","cardBorder","boxShadow","overflow","displayName","ROW_HEIGHT","ListItem","height","borderBottomWidth","tableBorder","flexDirection","alignItems","paddingLeft","paddingRight","zIndex","PILL_STYLE","pillText","pillBackgroundLight","getColumnWidth","show3Cols","isSidebar","offset","ToBudget","toBudget","onClick","amount","useSheetValue","format","useFormat","sidebarColumnWidth","justifyContent","width","Button","type","maxWidth","onPointerUp","e","stopPropagation","Label","title","styles","smallText","formInputText","flexShrink","textAlign","CellValue","binding","formatter","value","AutoTextSize","as","Text","minFontSizePx","maxFontSizePx","mode","fontSize","fontWeight","errorText","SvgCheveronRight","mobileHeaderTextSubdued","Saved","projected","reportBudget","totalBudgetedSaved","totalSaved","saved","isNegative","warningText","errorTextDark","BudgetCell","name","categoryId","month","onBudgetAction","dispatch","useDispatch","budgetType","useLocalPref","categoryBudgetMenuModal","onOpenCategoryBudgetMenu","pushModal","onUpdateBudget","category","onCopyLastMonthAverage","onSetMonthsAverage","numberOfMonths","onApplyBudgetTemplate","getStyle","makeAmountGrey","data-testid","ExpenseCategory","memo","isHidden","goal","longGoal","budgeted","spent","balance","carryover","index","blank","onEdit","showBudgetedCol","opacity","isGoalTemplatesEnabled","useFeatureFlag","goalTemp","goalValue","onCarryover","id","flag","collapseModals","catBalance","rolloverBudget","budgetedtmp","balancetmp","isLongGoal","budgetedValue","onTransfer","onSubmit","toCategoryId","from","to","showToBeBudgeted","onCover","fromCategoryId","onOpenBalanceMenu","listItemRef","useRef","navigate","useNavigate","onShowActivity","columnWidth","content","borderTopWidth","undefined","innerRef","flex","lineClamp","tableTextSubdued","display","noTapHighlight","span","role","BalanceWithCarryover","makeBalanceAmountStyle","carryoverIndicator","position","right","top","ExpenseGroupHeader","group","editMode","collapsed","onToggleCollapse","tableRowHeaderBackground","hidden","pageTextSubdued","activeStyle","hoveredStyle","SvgExpandArrow","transition","transform","IncomeGroupHeader","IncomeCategory","ExpenseGroup","onEditGroup","onEditCategory","onAddCategory","showHiddenCategories","editable","marginBottom","groupBudgeted","groupSumAmount","groupBalance","categories","filter","map","catGoal","catLongGoal","catBudgeted","catSumAmount","catCarryover","tableBackground","IncomeGroup","BudgetGroups","categoryGroups","gestures","onSaveCategory","onDeleteCategory","onReorderCategory","onReorderGroup","separateGroups","memoizeOne","groups","incomeGroup","find","is_income","expenseGroups","collapsedGroupIds","setCollapsedGroupIdsPref","includes","collapsedId","overflowY","paddingBottom","BudgetTable","monthBounds","onPrevMonth","onNextMonth","onSaveGroup","onDeleteGroup","onShowBudgetSummary","onOpenBudgetPageMenu","onOpenBudgetMonthMenu","useResponsive","showSpentColumn","setShowSpentColumnPref","toggleSpentColumn","noBackgroundColorStyle","Page","padding","header","MobilePageHeader","MonthSelector","onOpenMonthMenu","leftContent","mobileHeaderText","margin","SvgLogo","BudgetTableHeader","PullToRefresh","pageBackground","MOBILE_NAV_HEIGHT","buttonStyle","monthUtils","disabled","SvgViewShow","totalBudgetedExpense","totalBudgeted","totalSpent","totalLeftover","totalBalance","prevEnabled","start","nextEnabled","end","arrowButtonStyle","background","mobileHeaderTextHover","underlinedText","SvgArrowThinRight","BudgetInner","spreadsheet","currMonth","startMonth","setStartMonthPref","bounds","setBounds","initialized","setInitialized","_numberFormat","numberFormat","hideFraction","useEffect","init","send","prewarmMonth","unlisten","listen","tables","getCategories","args","applyBudgetAction","onOpenNewCategoryGroupModal","onValidate","createGroup","onOpenNewCategoryModal","groupId","isIncome","createCategory","updateGroup","g","mustTransfer","onDelete","transferCategory","deleteGroup","onToggleGroupVisibility","updateCategory","deleteCategory","onToggleCategoryVisibility","c","inGroup","aroundCategory","targetId","originalCatId","catId","cat","idx","findIndex","length","moveCategory","moveCategoryGroup","onSaveNotes","notes","note","onOpenCategoryGroupNotesModal","onSave","onOpenCategoryNotesModal","onOpenCategoryGroupMenuModal","onEditNotes","onToggleVisibility","onOpenCategoryMenuModal","setShowHiddenCategoriesPref","onToggleHiddenCategories","onOpenBudgetMonthNotesModal","onSwitchBudgetFile","onAddCategoryGroup","mobilePageBackground","AnimatedLoading","NamespaceContext","Provider","sync","Budget","list","grouped","useCategories","_budgetType","useSpreadsheet","useSetThemeColor","mobileViewTheme","AccountHeader","pageTextLight","text","AccountCard","account","updated","connected","pending","failed","getBalanceQuery","onSelect","mobileAccountShadow","onPress","isPressed","border","pillBorder","bankId","sidebarItemBackgroundPending","sidebarItemBackgroundFailed","sidebarItemBackgroundPositive","TextOneLine","mobileAccountText","makeAmountFullStyle","EmptyMessage","AccountList","accounts","updatedAccounts","getOnBudgetBalance","getOffBudgetBalance","onAddAccount","onSelectAccount","failedAccounts","useFailedAccounts","syncingAccountIds","useSelector","state","accountsSyncing","budgetedAccounts","offbudget","offbudgetAccounts","rightContent","variant","isHovered","SvgAdd","acct","bank","has","Accounts","useAccounts","queries","replaceModal","syncAndDownload","closed","AccountTransactions","schedulesTransform","useDefaultSchedulesQueryTransform","AccountName","MobileBackButton","AddTransactionButton","accountId","SchedulesProvider","TransactionListWithPreviews","updateAccount","onCloseAccount","openAccountCloseModal","onReopenAccount","reopenAccount","div","currentQuery","setCurrentQuery","isSearching","setIsSearching","isLoading","setIsLoading","transactions","setTransactions","prependTransactions","usePreviewTransactions","allTransactions","useMemo","concat","dateFormat","useDateFormat","makeRootQuery","useCallback","options","splits","paged","updateQuery","query","current","unsubscribe","pagedQuery","select","data","pageCount","fetchTransactions","refetchTransactions","run","getPayees","markAccountRead","updateSearchQuery","useDebounceCallback","searchText","onSearch","onSelectTransaction","transaction","isPreviewId","transactionId","onPost","parts","split","onSkip","onLoadMore","fetchNext","balanceCleared","balanceUncleared","TransactionListWithBalances","searchPlaceholder","Account","useParams","useAccount"],"mappings":"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"}